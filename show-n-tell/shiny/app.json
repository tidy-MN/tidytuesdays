[{"name":"app.R","content":"#https://cran.r-project.org/web/packages/esquisse/vignettes/shiny-usage.html\r\nlibrary(shiny)\r\nlibrary(dplyr)\r\nlibrary(colorblindcheck)\r\nlibrary(colorspace)\r\nlibrary(socviz)\r\nlibrary(data.table)\r\nlibrary(janitor)\r\nlibrary(xlsx)\r\nlibrary(chroma)\r\nlibrary(plyr)\r\nlibrary(gt)\r\nlibrary(jamba)\r\nlibrary(colorjam)\r\nlibrary(DescTools)\r\nlibrary(DT)\r\nlibrary(bslib)\r\nlibrary(colourpicker)\r\nlibrary(dichromat)\r\nlibrary(scales)\r\nlibrary(esquisse)\r\nlibrary(RColorBrewer)\r\n\r\n#library(RColor) --https://www.stat.ubc.ca/~jenny/STAT545A/block14_colors.html\r\n#https://search.r-project.org/CRAN/refmans/gt/html/info_paletteer.html\r\n\r\n##Don't think this is being used; just default values in case it needed it from when I started everything\r\nclrs = c(\"#366143\",\"#465a79\",\"#986b39\",\r\n         \"#648b60\",\"#9c695b\",\"#507f94\",\r\n         \"#988d6a\",\"#928f87\",\"#939f7e\",\r\n         \"#e0deba\",\"#7D98A9\")\r\n\r\n\r\nprcnt_transp = 40 #could ask for this number\r\nmin_luminance = -1.5 \r\nmax_luminance = 2\r\n\r\nOptimize_Color_Palette <- function(clrs,prcnt_transp,min_luminance,max_luminance){\r\n  ##This function finds the optimal luminance (I keep calling it contrast) of the hex values given by the user\r\n  print(\"HERE RUNS THE PROGRAM!!!!!!\")\r\n  print(paste0(\"COLORS:\",clrs))\r\n  clrs = Filter(function(x) grepl(\"#\", x),clrs)\r\n  print(paste0(\"COLORS2:\",clrs))\r\n  print(paste0(\"Transparency:\",prcnt_transp))\r\n  print(paste0(\"Min Lum:\",min_luminance))\r\n  print(paste0(\"Max Lum:\",max_luminance))\r\n  prcnt_transp <- as.numeric(prcnt_transp)\r\n  min_luminance <- as.numeric(min_luminance)\r\n  max_luminance <- as.numeric(max_luminance)\r\n  \r\n  Color_Deets<-function(clrs){\r\n    ##Return a table with RGB,Grayscale, and HLC values\r\n    if(\"matrix.unlist.clrs...nrow...length.clrs...byrow...TRUE.\" %in% colnames(as.data.frame(clrs))){\r\n      df <- data.frame(matrix(unlist(clrs), nrow=length(clrs), byrow=TRUE)) %>%\r\n        rename(\"HEX\"=\"matrix.unlist.clrs...nrow...length.clrs...byrow...TRUE.\") \r\n    }else{\r\n      df <- as.data.frame(matrix(unlist(clrs), nrow=length(clrs), byrow=TRUE)) %>%\r\n        rename_at( 1, ~\"HEX\" )\r\n    }\r\n    \r\n    df <- df %>% \r\n      mutate(Red = col2rgb(HEX)[1,],\r\n             Green = col2rgb(HEX)[2,],\r\n             Blue = col2rgb(HEX)[3,]) %>%\r\n      mutate(NTSC_Gray = 0.299*Red + 0.587*Green + 0.114*Blue) \r\n    #hue, chroma and luminance\r\n    fvr <- as.data.frame(farver::decode_colour(\r\n      clrs, \"rgb\", \"hcl\")) \r\n    colnames(fvr) <- c('Hue',\r\n                       'Chroma',\r\n                       'Luminance')\r\n    fvr$hexval <- as.list(clrs)\r\n    df <- merge(df,fvr,by.x='HEX',by.y='hexval')\r\n    \r\n    return(df)\r\n  }\r\n  \r\n  #apply transparency or not ------------------\r\n  print(\"apply Transparency\")\r\n  if(prcnt_transp<=90 & prcnt_transp>=10){\r\n    prcnt_transparency = (100-prcnt_transp)/100\r\n    clrs_with_transparency = alpha(clrs,prcnt_transparency)\r\n    track_hex <- data.frame(\r\n      original = unlist(clrs),\r\n      org_trans = unlist(clrs_with_transparency))\r\n    clrs <- clrs_with_transparency\r\n  }else{\r\n    track_hex <- data.frame(\r\n      original = unlist(clrs))\r\n  }\r\n\r\n  #figure out the differences of color and rank by luminance\r\n  print('ln 91')\r\n  edists <- data.frame(lumin_dist = Polychrome::computeDistances(clrs))\r\n\r\n  edists <- tibble::rownames_to_column(edists,\"colorindex\") \r\n  edists <- edists %>%\r\n    mutate(lumorder = rank(lumin_dist,\r\n                           ties.method = \"first\"))\r\n\r\n  indexinghex <- data.frame(indexval = unlist(as.list(seq(from=1,to=length(clrs)))),\r\n                            hexval = unlist(clrs))\r\n  \r\n  indexinghex$indexval <- paste0(\"X\", indexinghex$indexval)\r\n  print(\"INDEX HEX\")\r\n  print(indexinghex)\r\n  edists <- merge(edists,indexinghex,by.x='colorindex',by.y='indexval')\r\n  print('ln 105')\r\n  #find the maximum and minimum luminance between the colors\r\n  max_lum <- round_any(max(edists$lumin_dist),10,f=ceiling)\r\n  min_lum <- round_any(min(edists$lumin_dist),10,f=floor)\r\n  print(paste0(max_lum,\" - \",min_lum))\r\n  number_colors <- length(clrs)\r\n  print(number_colors)\r\n  lum_interval <- (max_lum - min_lum)/number_colors\r\n  print(lum_interval)\r\n  desired_lums <- seq(min_lum,max_lum,lum_interval)\r\n  print(desired_lums)\r\n  \r\n  luminance_list <- c()\r\n  for(c in clrs){\r\n    print(c)\r\n    luminance_list <- c(luminance_list,chroma::luminance(c))\r\n  }\r\n  print(luminance_list)\r\n  #determine exiting luminance\r\n  print('ln 119')\r\n  max_lum1<- max(luminance_list)\r\n  min_lum1<- min(luminance_list)\r\n  inrvl_lum1 <- round((max_lum1-min_lum1)/number_colors,4)\r\n\r\n  df_lum <- data.frame(hexclr = clrs,\r\n                       lums = luminance_list) %>%\r\n    mutate(sort_lums = rank(lums))   %>% \r\n    mutate(updated_lum = seq(min_luminance,max_luminance,abs(min_luminance-max_luminance)/(length(luminance_list)-1))[sort_lums]) %>%\r\n    mutate(adjust_lum_val = updated_lum - round(lums,4))\r\n\r\n  #update the color list\r\n  clrs_lum_fixed = c()\r\n  for(c in clrs){\r\n\r\n    new_clr = adjust_luminance(c,df_lum$adjust_lum_val[df_lum$hexclr==c])\r\n\r\n    clrs_lum_fixed = c(clrs_lum_fixed,new_clr)\r\n  }\r\n  updatedcheck <- data.frame(orig = clrs,\r\n                             new = clrs_lum_fixed)\r\n  \r\n  \r\n  checkingupdated <- Color_Deets(clrs_lum_fixed)\r\n  print(updatedcheck)\r\n  print(\"ln 145\")\r\n  print(track_hex)\r\n  print('ln 144')\r\n  final_pick <- merge(track_hex,updatedcheck,by.x='original',by.y='orig',all.x=TRUE)\r\n  print(final_pick)\r\n  final_pick$Deutanopia <- dichromat(final_pick$new, type = \"deutan\")\r\n  final_pick$Protanopia <- dichromat(final_pick$new, type = \"protan\")\r\n  final_pick$Tritanopia <- dichromat(final_pick$new, type = \"tritan\")\r\n  final_pick$Grayscale <- ColToGray(final_pick$new)\r\n  print(final_pick)\r\n  print('ln 150')\r\n  final_pick <- final_pick %>%\r\n    dplyr::rename(\"Original\" = \"original\",\r\n           \"Updated Luminance\" = \"new\")\r\n  print(\"FINAL PICK\")\r\n  print(final_pick)\r\n  return(final_pick)\r\n}\r\n\r\nHTML_DF <- function(final_pick){\r\n  ##Make HTML version of df for table\r\n  print(\"setup html for table\")\r\n  final_pick<-final_pick %>%\r\n    mutate_all(color_html)\r\n  print(\"HTML TABLE\")\r\n  print(final_pick)\r\n  return(final_pick)\r\n}\r\n\r\n\r\ncolor_html <- function(hex_color) {\r\n  print(\"COLOR_HTML\")\r\n  print(hex_color)\r\n  ##This returns html so that the colors change w/hex - Dorian helped with this! \r\n  paste0('<div style=\"background-color:',hex_color,';\"><text style=\"font-weight:bold;color:',hex_color,';filter:invert(100%) grayscale(100%);font-size=12pt;\">', hex_color, '<\/text><\/div>')\r\n}\r\n\r\ncolors_palettes_fuct <- function(numIndividuals){\r\n  ##This function tells the palettes how many colors the user wants and returns the list for the drop down\r\n  colors_palettes <- list(\r\n    \"Viridis\" = list(\r\n      \"viridis\" = viridis_pal(option = \"viridis\")(numIndividuals),\r\n      \"magma\" = viridis_pal(option = \"magma\")(numIndividuals),\r\n      \"inferno\" = viridis_pal(option = \"inferno\")(numIndividuals),\r\n      \"plasma\" = viridis_pal(option = \"plasma\")(numIndividuals),\r\n      \"cividis\" = viridis_pal(option = \"cividis\")(numIndividuals)\r\n    ),\r\n    \"Brewer\" = list(\r\n      \"Brown/Blue/Green\"  = brewer_pal(palette = \"BrBG\")(numIndividuals),\r\n      \"Pink/Green\" = brewer_pal(palette = \"PiYG\")(numIndividuals),\r\n      \"Purple/Green\" = brewer_pal(palette = \"PRGn\")(numIndividuals),\r\n      \"Purple/Orange\" = brewer_pal(palette = \"PuOr\")(numIndividuals),\r\n      \"Red/Blue\" = brewer_pal(palette = \"RdBu\")(numIndividuals),\r\n      \"Red/Gray\" = brewer_pal(palette = \"RdGy\")(numIndividuals),\r\n      \"Red/Yellow/Blue\" = brewer_pal(palette = \"RdYlBu\")(numIndividuals),\r\n      \"Red/Yellow/Green\" = brewer_pal(palette = \"RdYlGn\")(numIndividuals),\r\n      \"Rainbow\" = brewer_pal(palette = \"Spectral\")(numIndividuals),\r\n      \"Pastel1\" = brewer_pal(palette = \"Pastel1\")(numIndividuals),\r\n      \"Pastel2\" = brewer_pal(palette = \"Pastel2\")(numIndividuals),\r\n      \"Set2\" = brewer_pal(palette = \"Set2\")(numIndividuals),\r\n      \"Set3\" = brewer_pal(palette = \"Set3\")(numIndividuals),\r\n      \"Blue/Green\" = brewer_pal(palette = \"BuGn\")(numIndividuals),\r\n      \"Blue/Purple\" = brewer_pal(palette = \"BuPu\")(numIndividuals),\r\n      \"Green/Blue\" = brewer_pal(palette = \"GnBu\")(numIndividuals),\r\n      \"Orange/Red\" = brewer_pal(palette = \"OrRd\")(numIndividuals),\r\n      \"Accent\" = brewer_pal(palette = \"Accent\")(numIndividuals),\r\n      \"Purple/Blue\" = brewer_pal(palette = \"PuBu\")(numIndividuals),\r\n      \"Purple/Blue/Green\" = brewer_pal(palette = \"PuBuGn\")(numIndividuals),\r\n      \"Purple/Red\" = brewer_pal(palette = \"PuRd\")(numIndividuals),\r\n      \"Red/Purple\" = brewer_pal(palette = \"RdPu\")(numIndividuals),\r\n      \"Yellow/Green\" = brewer_pal(palette = \"YlGn\")(numIndividuals),\r\n      \"Yellow/Green/Blue\" = brewer_pal(palette = \"YlGnBu\")(numIndividuals),\r\n      \"Yellow/Orange/Blue\" = brewer_pal(palette = \"YlOrBr\")(numIndividuals),\r\n      \"Yellow/Orange/Blue\" = brewer_pal(palette = \"YlOrRd\")(numIndividuals),\r\n      \"Blues\" = brewer_pal(palette = \"Blues\")(numIndividuals),\r\n      \"Greens\" = brewer_pal(palette = \"Greens\")(numIndividuals),\r\n      \"Reds\" = brewer_pal(palette = \"Reds\")(numIndividuals),\r\n      \"Oranges\" = brewer_pal(palette = \"Oranges\")(numIndividuals),\r\n      \"Purples\" = brewer_pal(palette = \"Purples\")(numIndividuals),\r\n      \"Greys\" = brewer_pal(palette = \"Greys\")(numIndividuals),\r\n      \"Dark2\" = brewer_pal(palette = \"Dark2\")(numIndividuals),\r\n      \"Set1\" = brewer_pal(palette = \"Set1\")(numIndividuals),\r\n      \"Paired\" = brewer_pal(palette = \"Paired\")(numIndividuals)\r\n    )      )\r\n  \r\n  return(colors_palettes)\r\n}\r\n\r\nget_palette_hex_vals <- function(numIndividuals,palettename){\r\n  ##This function grabs the hex values from the palette selected by the user\r\n  # numIndividuals <- as.integer(input$clrcnt)\r\n\r\n  if(is.null(palettename)){\r\n    palettename = \"viridis\"\r\n  }\r\n  colors_palettes <- colors_palettes_fuct(numIndividuals)\r\n  \r\n  if(palettename %in% c(\"viridis\",\"magma\",\"inferno\",\"plasma\",\"cividis\")){\r\n    pickedpalette <- colors_palettes[['Viridis']][palettename]\r\n  }else{\r\n    pickedpalette <- colors_palettes[['Brewer']][palettename]\r\n  }\r\n\r\n  return(pickedpalette)\r\n}\r\n##########################################\r\n###########BEGIN SHINY APP ##########################################################################################\r\n##########################################\r\nui <- page_sidebar(\r\n  tags$head(\r\n    tags$style(HTML(\r\n      \"label { font-size:80%; font-family:Arial; margin-bottom: \r\n    0px;padding:0px; }\"\r\n    )),\r\n  ),\r\n  title = \"Color Contrast Optimizer\",\r\n  sidebar = sidebar(numericInput(\"clrcnt\",label= paste('How many colors are you working with?', \"(min:2; max:10)\", sep=\"\\n\"),value='3',min=2,max=10,step=1,width='100%'),\r\n                    uiOutput(\"palettepicker\"),\r\n                    # uiOutput(\"hexaentry\"),\r\n                    # actionButton(\"UpdateHEX\",label=\"Select This Palette\"),\r\n                    uiOutput(\"hexentry\"),\r\n                    # colourInput(\"hexA1\",\"pick colors\"),\r\n                    # numericInput(\"transparency\",label= \"Would you like to apply a transparency to the palette?\",value='0',min=0,max=100,step=1,width='100%'),\r\n                    sliderInput(\"lum_range\",label='Select your desired luminance range:',min=-2,max=2,value=c(-1.75,2),step=0.25,ticks=TRUE),\r\n                    actionButton(\"GO\",label=\"Optimize Contrast!\")),\r\n  \r\n  \"Preview the optimized palette and accessibility versions of it:\",\r\n  # verbatimTextOutput(\"res\"),\r\n  # verbatimTextOutput(\"pp\"),\r\n  tableOutput(\"showThePalette\"),\r\n  plotOutput(\"pieColorsOrig\"),\r\n  downloadButton('downloadData', 'Download CSV of HEX values (all)')\r\n)\r\n####################################################SERVER START####################################################\r\nserver <- function(input, output, session) {\r\n  ####Interactive color count - hex entry box\r\n  reactive_values = reactiveValues()\r\n  reactive_values$cnt = TRUE\r\n  reactive_values$palettespicked = TRUE\r\n  \r\n  observeEvent(input$clrcnt, {\r\n    reactive_values$cnt<-input$clrcnt\r\n  })\r\n  ###GET BELOW TO UPDATE BASED ON PALETTE CHOSEN\r\n  output$hexentry<-renderUI({\r\n    if(reactive_values$cnt>1 & reactive_values$cnt<11){\r\n      numIndividuals <- as.integer(input$clrcnt)\r\n      lapply(1:numIndividuals, function(i){\r\n        colourInput(paste0(\"hex\",i), label = paste0('HEX Value ',i), value = \"#\")\r\n        # updateColourInput(session,paste0(\"hex\",i), label = paste0('HEX Value ',i), value = \"#\",returnName=TRUE)\r\n        #https://www.rdocumentation.org/packages/shinyjs/versions/0.7/topics/updateColourInput\r\n      }\r\n      )\r\n\r\n    }else{\r\n      h3(\"I can only accept 2 - 10 hex values. Please change the number above to continue using the optimizer.\",style=\"color:red;font-size:12pt\")\r\n      \r\n    }\r\n      \r\n  })\r\n \r\n  output$palettepicker<-renderUI({\r\n    if(reactive_values$cnt>1 & reactive_values$cnt<11){\r\n      numIndividuals <- as.integer(input$clrcnt)\r\n      colors_palettes <- colors_palettes_fuct(numIndividuals)\r\n      palettePicker(inputId = \"pal\",\r\n                    label = \"Choose a palette\",\r\n                    choices = colors_palettes,\r\n                    selected = 'plasma',\r\n                    textColor = c(rep(\"white\", 5), rep(\"black\", 4)))\r\n      \r\n    }else{\r\n      h3(\"color picker not updated - please let Andrea know\")\r\n      \r\n    }\r\n    \r\n  }) \r\n  \r\n  #### output original palette - after action button\r\n  #try this if the color_html function doesn't work - https://gt.rstudio.com/reference/tab_style.html\r\n  allhexs_html <- eventReactive(input$GO,\r\n                           {\r\n                             hex_list <- NULL\r\n                             for(i in 1:length(names(input))){\r\n                               hex_list <- as.data.frame(rbind(hex_list,(cbind(names(input)[i],input[[names(input)[i]]]))))\r\n                             }\r\n                             \r\n                             all_colors <- HTML_DF(Optimize_Color_Palette(hex_list[6:nrow(hex_list),]$V2,\r\n                                                                  0,\r\n                                                                  hex_list[2,]$V2,\r\n                                                                  hex_list[3,]$V2))\r\n                             print(\"Ln 354\")\r\n                             print(all_colors)\r\n                             all_colors\r\n                           })\r\n  \r\n  \r\n  \r\n  \r\noutput$showThePalette <- renderTable({allhexs_html()},\r\n                                     spacing = 'xs',\r\n                                     width = '100%',\r\n                                     sanitize.text.function=function(x)x)\r\nallhexs <- eventReactive(input$GO,\r\n                         {\r\n                           hex_list <- NULL\r\n                           for(i in 1:length(names(input))){\r\n                             hex_list <- as.data.frame(rbind(hex_list,(cbind(names(input)[i],input[[names(input)[i]]]))))\r\n                           }\r\n                           all_colors <- Optimize_Color_Palette(hex_list[6:nrow(hex_list),]$V2,\r\n                                                                        0,\r\n                                                                        hex_list[2,]$V2,\r\n                                                                        hex_list[3,]$V2)\r\n                           \r\n                           all_colors\r\n                         })\r\n\r\noutput$pieColorsOrig <- renderPlot(color_pie({allhexs()}))\r\n\r\n\r\npalettepicked <- eventReactive(paste0(input$pal,input$clrcnt),{\r\n                           palettename <- input$pal\r\n                           numIndividuals <- as.integer(input$clrcnt)\r\n                           pickedpalette <- get_palette_hex_vals(numIndividuals,palettename)\r\n                           pickedpalette\r\n                         })\r\noutput$pp <- renderText({\r\n  paste(palettepicked(),collapse=\", \")\r\n })\r\n\r\n\r\nobserveEvent(input$pal,{\r\n  reactive_values$palettespicked <- input$pal\r\n})\r\n#https://github.com/rstudio/shiny/issues/2312\r\nobserve({\r\n  lapply(1:input$clrcnt, function(i){\r\n        tpp <-get_palette_hex_vals(input$clrcnt,input$pal)[[1]][i]\r\n        updateColourInput(session,\r\n                          inputId = paste0(\"hex\",i),\r\n                          label = paste0('HEX Value ',i),\r\n                          value = tpp)\r\n\r\n    })\r\n})\r\n\r\noutput$downloadData <- downloadHandler(\r\n  filename = function() { \r\n    paste(\"dataset-\", Sys.Date(), \".csv\", sep=\"\")\r\n  },\r\n  content = function(file) {\r\n    write.csv(allhexs(), file)\r\n  })\r\n\r\n}\r\n\r\n\r\nshinyApp(ui=ui, server=server)\r\n\r\n","type":"text"}]
